
@using SmartLearning.Shared.Models
@using System.Text
@inject HttpClient Http
@inject Sotsera.Blazor.Toaster.IToaster toaster



<div class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true" style="display: none;">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle"><i class="fa fa-user-plus"></i> Add Student</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true"><i class="fa fa-times"></i></span>
                </button>
            </div>
            <div class="modal-body">

                <EditForm Model="@StudentModel" OnInvalidSubmit="@InValidSubmit" OnValidSubmit="@ValidSubmit">
                    <DataAnnotationsValidator />

                    <div class="row">
                        <div class="col-md-6">
                            <label for="firstname">First Name</label>
                            <InputText Id="firstname" Class="form-control" bind-value="@StudentModel.FirstName" />
                           <small class="text-secondary">@($"{StudentModel.FirstName} {StudentModel.LastName}")</small>
                            <div class="text-danger">
                                <ValidationMessage For="@(()=>StudentModel.FirstName)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label for="lastname">First Name</label>
                            <InputText Id="lastname" Class="form-control" bind-value="@StudentModel.LastName" />
                            <div class="text-danger">
                                <ValidationMessage For="@(()=>StudentModel.LastName)" />
                            </div>
                        </div>

                        <div class="col-md-6">
                            <label for="dateofbirth">Date Of Birth</label>
                            <input type="date" format-value="yyyy-MM-dd" format="dd MMM yyyy" Class="form-control"
                                   bind="@DateOfBirth" />
                            <small class="text-secondary">@(DateOfBirth.ToLongDateString())</small>

                            <div class="text-danger">
                                <ValidationMessage For="@(()=>StudentModel.DateOfBirth)" />
                            </div>
                        </div>

                        <div class="col-md-6">
                            <label for="gender">Gender</label>
                            <select class="form-control" bind="@StudentModel.Gender" >
                                <option value="">Select Gender</option>
                                <option value="Male">Male</option>
                                <option value="Female">FeMale</option>
                                <option value="-">Not Specified</option>
                            </select>
                            <div class="text-danger">
                                <ValidationMessage For="@(()=>StudentModel.Gender)" />
                            </div>
                        </div>

                        <div class="col-md-6">
                            <label for="religion">Religion</label>
                            <select id="religion" Class="form-control" bind="@StudentModel.Religion" >
                                <option value="">Select Religion</option>
                                <option value="Islam">Islam</option>
                                <option value="NonMuslim">None Muslim</option>
                            </select>
                            <div class="text-danger">
                                <ValidationMessage For="@(()=>StudentModel.Religion)" />
                            </div>
                        </div>

                        <div class="col-md-6">
                            <label for="nationality">Religion</label>
                            <select id="nationality" Class="form-control" bind="@StudentModel.Nationality">
                                <option value="">Select Country</option>
                                <option value="Pakistani">Pakistani</option>
                                <option value="Afghani">Afghani</option>
                                <option value="Indian">Indian</option>
                            </select>
                            <div class="text-danger">
                                <ValidationMessage For="@(()=>StudentModel.Nationality)" />
                            </div>
                        </div>

                        <div class="col-md-6">
                            <p>&nbsp;</p>
                            @if (ItemSaving)
                            {
                                <WaitingSecondaryButton></WaitingSecondaryButton>
                            }
                            else
                            {
                                <button class="btn btn-secondary" type="submit">Save</button>
                            }


                        </div>

                    </div>


                </EditForm>
            </div>
            <div class="modal-footer">
                <button type="button" class="mb-2 mr-2 border-0 btn-transition btn btn-outline-secondary" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

@functions{

    private Student StudentModel = new Student();
    private DateTime DateOfBirth = DateTime.Now.Date;
    private bool ItemSaving = false;

    [Parameter] Action CallBack { get; set; }

    void ChangeDate(string date)
    {
        if (string.IsNullOrWhiteSpace(date))
            return;

        DateTime _dateOfBirth;
        if (DateTime.TryParse(date, out _dateOfBirth))
        {
            StudentModel.DateOfBirth = _dateOfBirth;
        }

    }

    void InValidSubmit()
    {

        toaster.Error("Fix the issues first", "Student");
    }

    async void ValidSubmit()
    {
        ItemSaving = true;

        StudentModel.DateOfBirth = DateOfBirth;
        StudentModel.Id = Guid.NewGuid().ToString();
        StudentModel.LastUpdate = DateTime.Now;

        try
        {

            var json = Json.Serialize(StudentModel);

            json = json.Replace('T', ' ').Replace('Z', ' ');

            var content = new StringContent(json, Encoding.UTF8, "application/json");

            await Http.PostAsync("api/student", content);
            toaster.Success("Student saved successfully", "New Student");

            CallBack?.Invoke();

            StudentModel.FirstName =
                StudentModel.LastName =
                StudentModel.Nationality =
                StudentModel.Religion =
                StudentModel.Gender =
                string.Empty;

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        ItemSaving = false;
        StateHasChanged();


    }

}